// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package golang

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	time "time"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang(in *jlexer.Lexer, out *UsersGroup) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint32(in.Uint32())
		case "group":
			(out.Group).UnmarshalEasyJSON(in)
		case "isUpdate":
			out.IsUpdate = bool(in.Bool())
		case "isCreate":
			out.IsCreate = bool(in.Bool())
		case "isDelete":
			out.IsDelete = bool(in.Bool())
		case "userAddId":
			out.UserAddID = uint32(in.Uint32())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifiedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang(out *jwriter.Writer, in UsersGroup) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserID))
	}
	if true {
		const prefix string = ",\"group\":"
		out.RawString(prefix)
		(in.Group).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"isUpdate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsUpdate))
	}
	{
		const prefix string = ",\"isCreate\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsCreate))
	}
	{
		const prefix string = ",\"isDelete\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsDelete))
	}
	if in.UserAddID != 0 {
		const prefix string = ",\"userAddId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UserAddID))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifiedDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UsersGroup) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UsersGroup) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UsersGroup) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UsersGroup) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang1(in *jlexer.Lexer, out *UserProfile) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "lastName":
			out.LastName = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "nick":
			out.PatronymicName = string(in.String())
		case "info":
			out.Info = string(in.String())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "city":
			out.City = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lng":
			out.Lng = float64(in.Float64())
		case "avatarB64":
			out.AvatarB64 = string(in.String())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang1(out *jwriter.Writer, in UserProfile) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	if in.LastName != "" {
		const prefix string = ",\"lastName\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.LastName))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.PatronymicName != "" {
		const prefix string = ",\"nick\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.PatronymicName))
	}
	if in.Info != "" {
		const prefix string = ",\"info\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Info))
	}
	if in.Country != "" {
		const prefix string = ",\"country\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Country))
	}
	if in.Region != "" {
		const prefix string = ",\"region\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Region))
	}
	if in.City != "" {
		const prefix string = ",\"city\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.City))
	}
	if in.Lat != 0 {
		const prefix string = ",\"lat\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lat))
	}
	if in.Lng != 0 {
		const prefix string = ",\"lng\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Float64(float64(in.Lng))
	}
	if in.AvatarB64 != "" {
		const prefix string = ",\"avatarB64\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.AvatarB64))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserProfile) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserProfile) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserProfile) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserProfile) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang1(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang2(in *jlexer.Lexer, out *UserLog) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "userId":
			out.UserID = uint32(in.Uint32())
		case "sessionKey":
			out.SessionKey = SessionKey(in.String())
		case "ip":
			out.IP = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "isAborted":
			out.IsAborted = bool(in.Bool())
		case "requestId":
			out.RequestID = string(in.String())
		case "browser":
			out.UserAgent = string(in.String())
		case "responceTime":
			out.ResponceTime = time.Duration(in.Int64())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddeDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang2(out *jwriter.Writer, in UserLog) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"userId\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.UserID))
	}
	if in.SessionKey != "" {
		const prefix string = ",\"sessionKey\":"
		out.RawString(prefix)
		out.String(string(in.SessionKey))
	}
	if in.IP != "" {
		const prefix string = ",\"ip\":"
		out.RawString(prefix)
		out.String(string(in.IP))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	{
		const prefix string = ",\"isAborted\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsAborted))
	}
	{
		const prefix string = ",\"requestId\":"
		out.RawString(prefix)
		out.String(string(in.RequestID))
	}
	if in.UserAgent != "" {
		const prefix string = ",\"browser\":"
		out.RawString(prefix)
		out.String(string(in.UserAgent))
	}
	{
		const prefix string = ",\"responceTime\":"
		out.RawString(prefix)
		out.Int64(int64(in.ResponceTime))
	}
	{
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddeDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserLog) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserLog) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserLog) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserLog) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang2(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang3(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "profile":
			(out.Profile).UnmarshalEasyJSON(in)
		case "email":
			out.Email = string(in.String())
		case "isEmailConfirm":
			out.IsEmailConfirm = bool(in.Bool())
		case "passHash":
			out.PassHash = string(in.String())
		case "salt":
			out.Salt = string(in.String())
		case "phone":
			out.Phone = string(in.String())
		case "company":
			(out.Company).UnmarshalEasyJSON(in)
		case "isCompanyConfirm":
			out.IsComapanyConfirm = bool(in.Bool())
		case "accesFailedCnt":
			out.AccessFailedCount = int(in.Int())
		case "restorePassword":
			out.RestorePassword = bool(in.Bool())
		case "lastActivity":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.LastActivity).UnmarshalJSON(data))
			}
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 0)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Role
					(v1).UnmarshalEasyJSON(in)
					out.Roles = append(out.Roles, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "usersGroups":
			if in.IsNull() {
				in.Skip()
				out.UsersGroups = nil
			} else {
				in.Delim('[')
				if out.UsersGroups == nil {
					if !in.IsDelim(']') {
						out.UsersGroups = make([]UsersGroup, 0, 0)
					} else {
						out.UsersGroups = []UsersGroup{}
					}
				} else {
					out.UsersGroups = (out.UsersGroups)[:0]
				}
				for !in.IsDelim(']') {
					var v2 UsersGroup
					(v2).UnmarshalEasyJSON(in)
					out.UsersGroups = append(out.UsersGroups, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "sessionKey":
			out.SessionKey = SessionKey(in.String())
		case "expired":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpireDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang3(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	if true {
		const prefix string = ",\"profile\":"
		out.RawString(prefix)
		(in.Profile).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"email\":"
		out.RawString(prefix)
		out.String(string(in.Email))
	}
	{
		const prefix string = ",\"isEmailConfirm\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsEmailConfirm))
	}
	if in.PassHash != "" {
		const prefix string = ",\"passHash\":"
		out.RawString(prefix)
		out.String(string(in.PassHash))
	}
	if in.Salt != "" {
		const prefix string = ",\"salt\":"
		out.RawString(prefix)
		out.String(string(in.Salt))
	}
	if in.Phone != "" {
		const prefix string = ",\"phone\":"
		out.RawString(prefix)
		out.String(string(in.Phone))
	}
	if true {
		const prefix string = ",\"company\":"
		out.RawString(prefix)
		(in.Company).MarshalEasyJSON(out)
	}
	if in.IsComapanyConfirm {
		const prefix string = ",\"isCompanyConfirm\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsComapanyConfirm))
	}
	if in.AccessFailedCount != 0 {
		const prefix string = ",\"accesFailedCnt\":"
		out.RawString(prefix)
		out.Int(int(in.AccessFailedCount))
	}
	if in.RestorePassword {
		const prefix string = ",\"restorePassword\":"
		out.RawString(prefix)
		out.Bool(bool(in.RestorePassword))
	}
	if true {
		const prefix string = ",\"lastActivity\":"
		out.RawString(prefix)
		out.Raw((in.LastActivity).MarshalJSON())
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v3, v4 := range in.Roles {
				if v3 > 0 {
					out.RawByte(',')
				}
				(v4).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if len(in.UsersGroups) != 0 {
		const prefix string = ",\"usersGroups\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v5, v6 := range in.UsersGroups {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	if in.SessionKey != "" {
		const prefix string = ",\"sessionKey\":"
		out.RawString(prefix)
		out.String(string(in.SessionKey))
	}
	if true {
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Raw((in.ExpireDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v User) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v User) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *User) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *User) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang3(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang4(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint16(in.Uint16())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang4(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint16(uint16(in.ID))
	}
	if in.Name != "" {
		const prefix string = ",\"name\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Description))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Status) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Status) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Status) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Status) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang4(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang5(in *jlexer.Lexer, out *ServerStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "info":
			(out.Info).UnmarshalEasyJSON(in)
		case "addition":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Addition = make(map[string]interface{})
				} else {
					out.Addition = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v7 interface{}
					if m, ok := v7.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v7.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v7 = in.Interface()
					}
					(out.Addition)[key] = v7
					in.WantComma()
				}
				in.Delim('}')
			}
		case "startDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.StartDate).UnmarshalJSON(data))
			}
		case "upTime":
			out.UpTime = time.Duration(in.Int64())
		case "upTimeStr":
			out.UpTimeStr = string(in.String())
		case "succesReqCnt":
			out.SuccesReqCnt = uint64(in.Uint64())
		case "faileReqCnt":
			out.FaileReqCnt = uint64(in.Uint64())
		case "faileGetCnt":
			out.FaileGetCnt = uint64(in.Uint64())
		case "failePostCnt":
			out.FailePostCnt = uint64(in.Uint64())
		case "failePutCnt":
			out.FailePutCnt = uint64(in.Uint64())
		case "faileDelCnt":
			out.FaileDelCnt = uint64(in.Uint64())
		case "middleReqTime":
			out.MiddleReqTime = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang5(out *jwriter.Writer, in ServerStatus) {
	out.RawByte('{')
	first := true
	_ = first
	if true {
		const prefix string = ",\"info\":"
		first = false
		out.RawString(prefix[1:])
		(in.Info).MarshalEasyJSON(out)
	}
	if len(in.Addition) != 0 {
		const prefix string = ",\"addition\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('{')
			v8First := true
			for v8Name, v8Value := range in.Addition {
				if v8First {
					v8First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v8Name))
				out.RawByte(':')
				if m, ok := v8Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v8Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v8Value))
				}
			}
			out.RawByte('}')
		}
	}
	if true {
		const prefix string = ",\"startDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.StartDate).MarshalJSON())
	}
	if in.UpTime != 0 {
		const prefix string = ",\"upTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.UpTime))
	}
	if in.UpTimeStr != "" {
		const prefix string = ",\"upTimeStr\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.UpTimeStr))
	}
	if in.SuccesReqCnt != 0 {
		const prefix string = ",\"succesReqCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.SuccesReqCnt))
	}
	if in.FaileReqCnt != 0 {
		const prefix string = ",\"faileReqCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FaileReqCnt))
	}
	if in.FaileGetCnt != 0 {
		const prefix string = ",\"faileGetCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FaileGetCnt))
	}
	if in.FailePostCnt != 0 {
		const prefix string = ",\"failePostCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FailePostCnt))
	}
	if in.FailePutCnt != 0 {
		const prefix string = ",\"failePutCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FailePutCnt))
	}
	if in.FaileDelCnt != 0 {
		const prefix string = ",\"faileDelCnt\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint64(uint64(in.FaileDelCnt))
	}
	if in.MiddleReqTime != 0 {
		const prefix string = ",\"middleReqTime\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int64(int64(in.MiddleReqTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang5(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang6(in *jlexer.Lexer, out *ServerInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "version":
			out.Version = string(in.String())
		case "about":
			out.About = string(in.String())
		case "maintainer":
			out.Maintainer = string(in.String())
		case "routes":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.Routes = make(map[string]string)
				} else {
					out.Routes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v9 string
					v9 = string(in.String())
					(out.Routes)[key] = v9
					in.WantComma()
				}
				in.Delim('}')
			}
		case "types":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.BaseTypes = make(map[string]interface{})
				} else {
					out.BaseTypes = nil
				}
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v10 interface{}
					if m, ok := v10.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v10.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v10 = in.Interface()
					}
					(out.BaseTypes)[key] = v10
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang6(out *jwriter.Writer, in ServerInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"version\":"
		out.RawString(prefix)
		out.String(string(in.Version))
	}
	if in.About != "" {
		const prefix string = ",\"about\":"
		out.RawString(prefix)
		out.String(string(in.About))
	}
	if in.Maintainer != "" {
		const prefix string = ",\"maintainer\":"
		out.RawString(prefix)
		out.String(string(in.Maintainer))
	}
	if len(in.Routes) != 0 {
		const prefix string = ",\"routes\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v11First := true
			for v11Name, v11Value := range in.Routes {
				if v11First {
					v11First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v11Name))
				out.RawByte(':')
				out.String(string(v11Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.BaseTypes) != 0 {
		const prefix string = ",\"types\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v12First := true
			for v12Name, v12Value := range in.BaseTypes {
				if v12First {
					v12First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v12Name))
				out.RawByte(':')
				if m, ok := v12Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v12Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v12Value))
				}
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ServerInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ServerInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ServerInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ServerInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang6(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang7(in *jlexer.Lexer, out *RoleSets) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "name":
			out.Name = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 0)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v13 Role
					(v13).UnmarshalEasyJSON(in)
					out.Roles = append(out.Roles, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang7(out *jwriter.Writer, in RoleSets) {
	out.RawByte('{')
	first := true
	_ = first
	if in.Name != "" {
		const prefix string = ",\"name\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.Name))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v14, v15 := range in.Roles {
				if v14 > 0 {
					out.RawByte(',')
				}
				(v15).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RoleSets) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RoleSets) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RoleSets) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RoleSets) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang7(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang8(in *jlexer.Lexer, out *Role) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "url":
			out.URL = string(in.String())
		case "method":
			out.Method = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "userAddId":
			out.UserAddID = uint32(in.Uint32())
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang8(out *jwriter.Writer, in Role) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	{
		const prefix string = ",\"method\":"
		out.RawString(prefix)
		out.String(string(in.Method))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if in.UserAddID != 0 {
		const prefix string = ",\"userAddId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UserAddID))
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Role) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Role) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Role) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Role) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang8(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang9(in *jlexer.Lexer, out *Group) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "ownerId":
			out.OwnerID = uint32(in.Uint32())
		case "comapnyId":
			out.CompanyID = uint32(in.Uint32())
		case "modifiedBy":
			out.ModifiedBy = uint32(in.Uint32())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "logo":
			out.Logo = string(in.String())
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang9(out *jwriter.Writer, in Group) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.OwnerID != 0 {
		const prefix string = ",\"ownerId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.OwnerID))
	}
	if in.CompanyID != 0 {
		const prefix string = ",\"comapnyId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.CompanyID))
	}
	if in.ModifiedBy != 0 {
		const prefix string = ",\"modifiedBy\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.ModifiedBy))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if in.Logo != "" {
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.Logo))
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Group) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Group) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Group) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Group) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang9(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang10(in *jlexer.Lexer, out *DBStats) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "maxOpenCon":
			out.MaxOpenConnections = int(in.Int())
		case "establishCon":
			out.OpenConnections = int(in.Int())
		case "inUseCon":
			out.InUse = int(in.Int())
		case "idleCon":
			out.Idle = int(in.Int())
		case "waitCon":
			out.WaitCount = int64(in.Int64())
		case "waitDuration":
			out.WaitDuration = time.Duration(in.Int64())
		case "maxIdleClosed":
			out.MaxIdleClosed = int64(in.Int64())
		case "maxIdleTimeClosed":
			out.MaxIdleTimeClosed = int64(in.Int64())
		case "maxLifetimeClosed":
			out.MaxLifetimeClosed = int64(in.Int64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang10(out *jwriter.Writer, in DBStats) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"maxOpenCon\":"
		out.RawString(prefix[1:])
		out.Int(int(in.MaxOpenConnections))
	}
	{
		const prefix string = ",\"establishCon\":"
		out.RawString(prefix)
		out.Int(int(in.OpenConnections))
	}
	{
		const prefix string = ",\"inUseCon\":"
		out.RawString(prefix)
		out.Int(int(in.InUse))
	}
	{
		const prefix string = ",\"idleCon\":"
		out.RawString(prefix)
		out.Int(int(in.Idle))
	}
	{
		const prefix string = ",\"waitCon\":"
		out.RawString(prefix)
		out.Int64(int64(in.WaitCount))
	}
	{
		const prefix string = ",\"waitDuration\":"
		out.RawString(prefix)
		out.Int64(int64(in.WaitDuration))
	}
	{
		const prefix string = ",\"maxIdleClosed\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxIdleClosed))
	}
	{
		const prefix string = ",\"maxIdleTimeClosed\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxIdleTimeClosed))
	}
	{
		const prefix string = ",\"maxLifetimeClosed\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxLifetimeClosed))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DBStats) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DBStats) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DBStats) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DBStats) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang10(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang11(in *jlexer.Lexer, out *Company) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint32(in.Uint32())
		case "name":
			out.Name = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "code":
			out.Code = uint64(in.Uint64())
		case "address":
			(out.Addr).UnmarshalEasyJSON(in)
		case "userAddId":
			out.UserAddID = uint32(in.Uint32())
		case "isControl":
			out.IsControl = bool(in.Bool())
		case "logo":
			out.Logo = string(in.String())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang11(out *jwriter.Writer, in Company) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint32(uint32(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if in.Code != 0 {
		const prefix string = ",\"code\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Code))
	}
	if true {
		const prefix string = ",\"address\":"
		out.RawString(prefix)
		(in.Addr).MarshalEasyJSON(out)
	}
	if in.UserAddID != 0 {
		const prefix string = ",\"userAddId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.UserAddID))
	}
	if in.IsControl {
		const prefix string = ",\"isControl\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsControl))
	}
	if in.Logo != "" {
		const prefix string = ",\"logo\":"
		out.RawString(prefix)
		out.String(string(in.Logo))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Company) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Company) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Company) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Company) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang11(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang12(in *jlexer.Lexer, out *Comment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "head":
			out.Head = string(in.String())
		case "data":
			out.Data = string(in.String())
		case "type":
			out.ContentType = string(in.String())
		case "userAddId":
			out.UserAddID = uint32(in.Uint32())
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifiedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang12(out *jwriter.Writer, in Comment) {
	out.RawByte('{')
	first := true
	_ = first
	if in.ID != 0 {
		const prefix string = ",\"id\":"
		first = false
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.Head != "" {
		const prefix string = ",\"head\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Head))
	}
	if in.Data != "" {
		const prefix string = ",\"data\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Data))
	}
	if in.ContentType != "" {
		const prefix string = ",\"type\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.ContentType))
	}
	if in.UserAddID != 0 {
		const prefix string = ",\"userAddId\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Uint32(uint32(in.UserAddID))
	}
	if true {
		const prefix string = ",\"addedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifiedDate\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"status\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.Status).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Comment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Comment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Comment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Comment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang12(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang13(in *jlexer.Lexer, out *Address) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "country":
			out.Country = string(in.String())
		case "region":
			out.Region = string(in.String())
		case "city":
			out.City = string(in.String())
		case "district":
			out.District = string(in.String())
		case "microDistrict":
			out.MicroDistrict = string(in.String())
		case "street":
			out.Street = string(in.String())
		case "build":
			out.Build = string(in.String())
		case "apartment":
			out.Apartment = string(in.String())
		case "lat":
			out.Lat = float64(in.Float64())
		case "lng":
			out.Lng = float64(in.Float64())
		case "postCode":
			out.PostCode = string(in.String())
		case "comment":
			(out.Comment).UnmarshalEasyJSON(in)
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "modifDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ModifiedDate).UnmarshalJSON(data))
			}
		case "addedById":
			out.AddedByID = uint32(in.Uint32())
		case "status":
			(out.Status).UnmarshalEasyJSON(in)
		case "fullName":
			out.FullName = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang13(out *jwriter.Writer, in Address) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	{
		const prefix string = ",\"country\":"
		out.RawString(prefix)
		out.String(string(in.Country))
	}
	{
		const prefix string = ",\"region\":"
		out.RawString(prefix)
		out.String(string(in.Region))
	}
	{
		const prefix string = ",\"city\":"
		out.RawString(prefix)
		out.String(string(in.City))
	}
	if in.District != "" {
		const prefix string = ",\"district\":"
		out.RawString(prefix)
		out.String(string(in.District))
	}
	if in.MicroDistrict != "" {
		const prefix string = ",\"microDistrict\":"
		out.RawString(prefix)
		out.String(string(in.MicroDistrict))
	}
	{
		const prefix string = ",\"street\":"
		out.RawString(prefix)
		out.String(string(in.Street))
	}
	{
		const prefix string = ",\"build\":"
		out.RawString(prefix)
		out.String(string(in.Build))
	}
	if in.Apartment != "" {
		const prefix string = ",\"apartment\":"
		out.RawString(prefix)
		out.String(string(in.Apartment))
	}
	{
		const prefix string = ",\"lat\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lat))
	}
	{
		const prefix string = ",\"lng\":"
		out.RawString(prefix)
		out.Float64(float64(in.Lng))
	}
	if in.PostCode != "" {
		const prefix string = ",\"postCode\":"
		out.RawString(prefix)
		out.String(string(in.PostCode))
	}
	if true {
		const prefix string = ",\"comment\":"
		out.RawString(prefix)
		(in.Comment).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	if true {
		const prefix string = ",\"modifDate\":"
		out.RawString(prefix)
		out.Raw((in.ModifiedDate).MarshalJSON())
	}
	if in.AddedByID != 0 {
		const prefix string = ",\"addedById\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.AddedByID))
	}
	if true {
		const prefix string = ",\"status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	if in.FullName != "" {
		const prefix string = ",\"fullName\":"
		out.RawString(prefix)
		out.String(string(in.FullName))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Address) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Address) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Address) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Address) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang13(l, v)
}
func easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang14(in *jlexer.Lexer, out *APIToken) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = uint64(in.Uint64())
		case "ownerId":
			out.OwnerID = uint32(in.Uint32())
		case "token":
			out.Token = string(in.String())
		case "description":
			out.Description = string(in.String())
		case "roles":
			if in.IsNull() {
				in.Skip()
				out.Roles = nil
			} else {
				in.Delim('[')
				if out.Roles == nil {
					if !in.IsDelim(']') {
						out.Roles = make([]Role, 0, 0)
					} else {
						out.Roles = []Role{}
					}
				} else {
					out.Roles = (out.Roles)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Role
					(v16).UnmarshalEasyJSON(in)
					out.Roles = append(out.Roles, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "addedDate":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.AddedDate).UnmarshalJSON(data))
			}
		case "expired":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.ExpireDate).UnmarshalJSON(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang14(out *jwriter.Writer, in APIToken) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Uint64(uint64(in.ID))
	}
	if in.OwnerID != 0 {
		const prefix string = ",\"ownerId\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.OwnerID))
	}
	{
		const prefix string = ",\"token\":"
		out.RawString(prefix)
		out.String(string(in.Token))
	}
	if in.Description != "" {
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	if len(in.Roles) != 0 {
		const prefix string = ",\"roles\":"
		out.RawString(prefix)
		{
			out.RawByte('[')
			for v17, v18 := range in.Roles {
				if v17 > 0 {
					out.RawByte(',')
				}
				(v18).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"addedDate\":"
		out.RawString(prefix)
		out.Raw((in.AddedDate).MarshalJSON())
	}
	{
		const prefix string = ",\"expired\":"
		out.RawString(prefix)
		out.Raw((in.ExpireDate).MarshalJSON())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v APIToken) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v APIToken) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson56de76c1EncodeGithubComBlabuEgeonLibGolang14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *APIToken) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *APIToken) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson56de76c1DecodeGithubComBlabuEgeonLibGolang14(l, v)
}
