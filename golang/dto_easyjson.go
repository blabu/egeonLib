// TEMPORARY AUTOGENERATED FILE: easyjson stub code to make the package
// compilable during generation.

package  golang

import (
  "github.com/mailru/easyjson/jwriter"
  "github.com/mailru/easyjson/jlexer"
)

func ( APIToken ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* APIToken ) UnmarshalJSON([]byte) error { return nil }
func ( APIToken ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* APIToken ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_APIToken *APIToken

func ( Address ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Address ) UnmarshalJSON([]byte) error { return nil }
func ( Address ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Address ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Address *Address

func ( Comment ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Comment ) UnmarshalJSON([]byte) error { return nil }
func ( Comment ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Comment ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Comment *Comment

func ( Company ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Company ) UnmarshalJSON([]byte) error { return nil }
func ( Company ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Company ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Company *Company

func ( DBStats ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* DBStats ) UnmarshalJSON([]byte) error { return nil }
func ( DBStats ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* DBStats ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_DBStats *DBStats

func ( Group ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Group ) UnmarshalJSON([]byte) error { return nil }
func ( Group ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Group ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Group *Group

func ( Role ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Role ) UnmarshalJSON([]byte) error { return nil }
func ( Role ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Role ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Role *Role

func ( RoleSets ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* RoleSets ) UnmarshalJSON([]byte) error { return nil }
func ( RoleSets ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* RoleSets ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_RoleSets *RoleSets

func ( ServerInfo ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ServerInfo ) UnmarshalJSON([]byte) error { return nil }
func ( ServerInfo ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ServerInfo ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ServerInfo *ServerInfo

func ( ServerStatus ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* ServerStatus ) UnmarshalJSON([]byte) error { return nil }
func ( ServerStatus ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* ServerStatus ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_ServerStatus *ServerStatus

func ( Status ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* Status ) UnmarshalJSON([]byte) error { return nil }
func ( Status ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* Status ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_Status *Status

func ( User ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* User ) UnmarshalJSON([]byte) error { return nil }
func ( User ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* User ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_User *User

func ( UserLog ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* UserLog ) UnmarshalJSON([]byte) error { return nil }
func ( UserLog ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* UserLog ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_UserLog *UserLog

func ( UserProfile ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* UserProfile ) UnmarshalJSON([]byte) error { return nil }
func ( UserProfile ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* UserProfile ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_UserProfile *UserProfile

func ( UsersGroup ) MarshalJSON() ([]byte, error) { return nil, nil }
func (* UsersGroup ) UnmarshalJSON([]byte) error { return nil }
func ( UsersGroup ) MarshalEasyJSON(w *jwriter.Writer) {}
func (* UsersGroup ) UnmarshalEasyJSON(l *jlexer.Lexer) {}

type EasyJSON_exporter_UsersGroup *UsersGroup
